package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"main/graph/model"
)

// AddUsuario is the resolver for the addUsuario field.
func (r *mutationResolver) AddUsuario(ctx context.Context, input model.NewUsuario) (*model.Usuario, error) {
	usuario := &model.Usuario{
		Name:     input.Name,
		Password: input.Password,
	}
	query := r.Db.Create(&usuario)
	print(usuario)

	return usuario, query.Error
}

// AddPedido is the resolver for the addPedido field.
func (r *mutationResolver) AddPedido(ctx context.Context, input model.NewPedido) (*model.Pedido, error) {
	pedido := &model.Pedido{
		Name:       input.Name,
		Quantidade: input.Quantidade,
		UsuarioID:  input.UsuarioID,
	}
	query := r.Db.Create(&pedido)
	print(pedido)

	return pedido, query.Error
}

// UpdateUsuario is the resolver for the updateUsuario field.
func (r *mutationResolver) UpdateUsuario(ctx context.Context, id int, input model.NewUsuario) (usuario *model.Usuario, err error) {
	usuario = &model.Usuario{
		ID:       &id,
		Name:     input.Name,
		Password: input.Password,
	}

	query := r.Db.Save(&usuario)

	return usuario, query.Error
}

// UpdatePedido is the resolver for the updatePedido field.
func (r *mutationResolver) UpdatePedido(ctx context.Context, id int, input model.NewPedido) (pedido *model.Pedido, err error) {
	pedido = &model.Pedido{
		ID:         &id,
		Quantidade: input.Quantidade,
		Name:       input.Name,
		UsuarioID:  input.UsuarioID,
	}

	query := r.Db.Save(&pedido)

	return pedido, query.Error
}

// Usuario is the resolver for the usuario field.
func (r *queryResolver) Usuario(ctx context.Context, id int) (usuario *model.Usuario, err error) {
	return usuario, r.Db.First(&usuario, id).Error
}

// Usuarios is the resolver for the usuarios field.
func (r *queryResolver) Usuarios(ctx context.Context) (usuarios []*model.Usuario, err error) {
	return usuarios, r.Db.Find(&usuarios).Error
}

// PedidosFromUsuario is the resolver for the pedidosFromUsuario field.
func (r *queryResolver) PedidosFromUsuario(ctx context.Context, id int) (pedidos []*model.Pedido, err error) {
	return pedidos, r.Db.Where("usuario_id = ?", id).Find(&pedidos).Error
}

// Pedidos is the resolver for the pedidos field.
func (r *queryResolver) Pedidos(ctx context.Context) (pedidos []*model.Pedido, err error) {
	return pedidos, r.Db.Find(&pedidos).Error
}

// Pedido is the resolver for the pedido field.
func (r *queryResolver) Pedido(ctx context.Context, id int) (pedido *model.Pedido, err error) {
	return pedido, r.Db.First(&pedido, id).Error
}

// UsuarioFromPedido is the resolver for the usuarioFromPedido field.
func (r *queryResolver) UsuarioFromPedido(ctx context.Context, id int) (usuario *model.Usuario, err error) {
	pedido := &model.Pedido{}
	err_j := r.Db.First(&pedido, id).Error

	if err_j != nil {
		return &model.Usuario{}, err_j
	}

	return usuario, r.Db.Where("id = ?", pedido.UsuarioID).First(&usuario).Error
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
